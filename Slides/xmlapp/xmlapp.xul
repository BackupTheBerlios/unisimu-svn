<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="css/agentzh.css" type="text/css"?>

<page xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" id="sporx" xmlns:html="http:/www.w3.org/1999/xhtml" orient="vertical" onkeypress="Sporx.onKeyPress(event);">

<html:textarea id="builtinCode" style="visibility: collapse">----
XML in the real world
----
{{#x|XML}} in the {{#ci|real}} world
真实世界中的{{#x|XML}}
☺{{#author|Agent Zhang}}☺
{{#author|(章亦春)}}
{{#date|2006.10}}
----
♡ {{#x|RSS}} is {{#ci|cool}}!
  
RSS 很酷哦！
----
RSS
➥ {{#x|R}}eally {{#x|S}}imple {{#x|S}}yndication
----
{{#ci|Tired}} of {{#x|checking}} your favorite
news and blogs sites everyday?
  
厌倦了每天去查看你最喜爱的
那些新闻和博客网站了吧？
----
Let me tell you 
how {{#x|RSS}} can {{#ci|save}} you.
  
让我来告诉你
如何让 RSS 拯救你。
----
Open {{#x|Google Reader}}:
the {{#ci|first}} thing that I do everyday.
  
打开 Google Reader：
我每天做的第一件事情。
----
{{img src="#" width="0" height="0"}}
{{img src="images/reader.png" width="834" height="595"}}
----
Let's read chromatic's {{#ci|latest}} journals
in {{#x|Google Reader}}...
  
让我们在 Google Reader 中阅读 chromatic
最近的日记……
----
{{img src="images/reader_c.png" width="808" height="498"}}
----
Let's take a look at the {{#ci|original}} journal item
on the {{#x|use.perl.org}} site...
  
让我们来看看
use.perl.org 站点上的原始日记……
----
{{img src="images/useperl_c.png" width="806" height="559"}}
----
Now let's turn to the {{#ci|latest}} Pugs blog posts
in {{#x|Google Reader}}...
  
现在让我们在 Google Reader
中转向新的 Pugs 博客文章……
----
{{img src="images/reader_pugs.png" width="870" height="583"}}
----
The {{#ci|original}} post I published
onto the {{#x|pugs.blogs.com}} site...
  
我最初发布在
use.perl.org 站点上的帖子……
----
{{img src="images/pugs.png" width="815" height="591"}}
----
The {{#x|XML}} magic
{{#ci|behind}} the curtain...
   
幕后的 XML 魔法……
----
{{img src="images/subs_list.png" width="776" height="508"}}
----
{{#x|RSS feed}} for {{#ci|chromatic}}'s journals...
   
chromatic 的日记的
RSS 反馈……
----
{{img src="images/useperl_rss.png" width="748" height="527"}}
----
{{#x|RSS}} feed for 
our {{#ci|Pugs}} blog site...
  
Pugs 博客站点的
RSS 反馈……
----
{{img src="images/pugs_rss.png" width="775" height="575"}}
----
♡ {{#x|AJAX}}, our {{#ci|good}} friends!
  
AJAX，我们的好朋友！
----
AJAX
➥ {{#x|A}}synchronous {{#x|JA}}vaScript and {{#x|X}}ML
----
☺ Let's open {{#ci|Cherry}}'s {{#x|Qzone blogs}}...
  
让我们打开 Cherry 的 Qzone 博客……
----
{{img src="images/cherry_home.png" width="799" height="569"}}
----
☺ {{#ci|Click}} one of the articles and {{#x|enter}} it...
  
点击其中的一篇文章进入……
----
{{img src="images/cherry_post.png" width="800" height="569"}}
----
What happened {{#ci|behind the curtain}}
when we're performing these {{#x|actions}}?
  
在我们执行这些动作的时候，
幕后都发生了哪些事情？
----
Here is the underlying {{#x|HTTP traffic}}
between the {{#ci|Qzone site}} and my {{#ci|IE browser}}
recorded by {{#x|HTTP::Proxy}}...
  
这里有 HTTP::Proxy 模块记录下的
Qzone 站点与我的 IE 浏览器之间
的底层 HTTP 通信……
----
  {{#cm|[16:04:56]}} GET http://u13.qzone.qq.com/cgi-bin/cgi_client_entry.cgi?uin=11854905
  {{#cm|[16:05:40]}} GET http://u13.qzone.qq.com/proxy.html
   ...
  {{#cm|[16:09:37]}} GET {{#kw|http://b1.qzone.qq.com/cgi-bin/blog/blog_signature.cgi?uin=11854905}}
  {{#cm|[16:10:00]}} GET {{#kw|http://b1.qzone.qq.com/cgi-bin/blog/blog_get_category.cgi?}}
                   {{#kw|uin=11854905}}
  {{#cm|[16:10:00]}} GET http://imgcache.qq.com/qzone/proxy.vbs
  {{#cm|[16:10:02]}} GET {{#kw|http://b1.qzone.qq.com/cgi-bin/blog/blog_one_title.cgi?}}
                   {{#kw|uin=11854905&amp;blogid=39&amp;flag=0}}
  {{#cm|[16:10:04]}} GET {{#kw|http://b1.qzone.qq.com/cgi-bin/blog/blog_commentlist.cgi?}}
                   {{#kw|uin=11854905&amp;blogid=39&amp;archive=-2}}
   ...
----
{{#ci|Most}} of the {{#x|HTTP requests}} were initiated
by the {{#x|JavaScript}} code 
running in your {{#ci|web browser}}.
  
这些 HTTP 请求中的大部分是由
运行在你的网络浏览器中的
JavaScript 代码发起的。
----
Let's {{#ci|check}} some of 
the {{#x|HTTP requests}} by hand...
   
让我们来手工查看一下
其中的几个 HTTP 请求……
----
{{#x|XML data}} for Cherry's {{#ci|signature}}
  
Cherry 的个性签名所对应的 XML 数据
  
➥ {{#kw|http://b1.qzone.qq.com/cgi-bin/blog/}}
{{#kw|blog_signature.cgi?uin=11854905}}
----
{{img src="images/signature.png" width="829" height="212"}}
----
{{#x|XML data}} for Cherry's article {{#ci|category}} list
  
Cherry 的文章类别列表所对应的 XML 数据
  
➥ {{#kw|http://b1.qzone.qq.com/cgi-bin/blog/}}
{{#kw|blog_get_category.cgi?uin=11854905}}
----
{{img src="images/category.png" width="599" height="387"}}
----
{{#x|XML data}} for the {{#ci|title}} of
Cherry's 40th post (with ID 39)
  
Cherry 的第 40 篇帖子(标识为 39）的{{#x|标题}}
所对应的 XML 数据
  
➥ {{#kw|http://b1.qzone.qq.com/cgi-bin/blog/blog_one_title.cgi?}}
{{#kw|uin=11854905&amp;blogid=39&amp;flag=0}}
----
{{img src="images/title.png" width="695" height="394"}}
----
{{#x|XML data}} for the {{#ci|body and comments}} of
Cherry's 40th post (with ID 39)
  
Cherry 的第 40 篇帖子(标识为 39）的{{#x|正文及评论}}
所对应的 XML 数据
  
➥ {{#kw|http://b1.qzone.qq.com/cgi-bin/blog/blog_commentlist.cgi?}}
{{#kw|uin=11854905&amp;blogid=39&amp;archive=-2}}
----
{{img src="images/body.png" width="733" height="544"}}
----
Our {{#x|web browser}} renders these {{#x|XML data}} files
using {{#x|HTML templates}} sent by the Qzone server,
and generates the final {{#x|HTML source}}.
   
我们的网络浏览器根据 Qzone 服务器
传过来的 HTML 模板对这些 XML 数据进行渲染,
生成最终的 HTML 源码。
----
{{#x|XML data}} + {{#kw|HTML templates}} = {{#cm|final HTML source}}
   
XML 数据 + HTML 模板 = 最终的 HTML 源码
----
The {{#ci|whole}} process happens
in our {{#x|web browser}}.
   
整个过程都发生在我们的浏览器内部。
----
But {{#ci|where}} are
the {{#x|HTML templates}}?
  
但是 HTML 模板究竟在哪里呢？
----
Let's check the {{#ci|raw}} HTML source
sent from the Qzone {{#x|server}}
  
让我们来看看 Qzone 服务器
传过来的原始 HTML 源码
----
{{img src="images/check_html.png" width="761" height="564"}}
----
    ...
    &lt;!-- 日志//-->
    &lt;div id=\"tpl_blog_b\" class=\"mode_table\" style=\"display:none\">...
     &lt;table cellSpacing=\"0\" cellpadding=\"0\" width=\"100%\" class= ...
        {{#x|[%repeat_0 match="/rss/channel/item" repeat_num="10"%]}}
        &lt;tr>&lt;td class=\"index_blog_btd\">
        [&lt;a href=\"#\"  onclick=\"openCategory(\'{{#x|[%=@type%]}}\');return false\" 
        ...title=\"点击进入分类\">{{#x|[%=@category%]}}&lt;/a>]
        &lt;a href=\"#\" title=\"{{#x|[%=@title%]}} -- 发表于 {{#x|[%=@pubTimeString%]}}\" 
        onClick=\"openBlog(\'{{#x|[%=@archive%]}}\',\'{{#x|[%=@id%]}}\');return false\">
        ... &lt;/a>&lt;/td>
        &lt;td class=\"info\">评论(&lt;span class=\"hit\">{{#x|[%=@comment%]}}&lt;/span>)&lt;/td>
        {{#x|[%_repeat_0%]}}
     &lt;/table>
    &lt;/div>
    ...
----
You see,
it's a {{#ci|client}}-side HTML {{#x|template}}!
  
{{#kw|☼}}
  
你看，
这是一个客户端的 HTML 模板！
----
It's the {{#x|JavaScrip code}} that {{#ci|grabs}} the
{{#x|XML data}} from the web and fills it into
the {{#x|HTML templates}} automatically,
resulting in the final appearance we
see in the browser.
  
所以是 JavaScript 代码自动从网上获取
XML 数据并将之填入到 HTML 模板中，最
终得到我们在浏览器中看到的效果。
----
Then {{#x|why can't}} we do XML data
grabbing {{#ci|ourselves}}?
  
那么为什么我们就不可以自己去
攫取 XML 数据呢？
----
For example, we can obtain the {{#x|data}}
for {{#x|all}} of Cherry's articles
by simply changing the {{#x|URL}}!
  
比如，我们可以通过简单地修改网址
得到的有文章的数据！
----
http://b1.qzone.qq.com/cgi-bin/blog/blog_one_title.cgi?uin=11854905&amp;{{#x|blogid=39}}&amp;flag=0
+http://b1.qzone.qq.com/cgi-bin/blog/blog_one_title.cgi?uin=11854905&amp;{{#x|blogid=38}}&amp;flag=0
+http://b1.qzone.qq.com/cgi-bin/blog/blog_one_title.cgi?uin=11854905&amp;{{#x|blogid=37}}&amp;flag=0
+http://b1.qzone.qq.com/cgi-bin/blog/blog_one_title.cgi?uin=11854905&amp;{{#x|blogid=36}}&amp;flag=0
+http://b1.qzone.qq.com/cgi-bin/blog/blog_one_title.cgi?uin=11854905&amp;{{#x|blogid=35}}&amp;flag=0
+...
http://b1.qzone.qq.com/cgi-bin/blog/blog_one_title.cgi?uin=11854905&amp;{{#x|blogid=0}}&amp;flag=0
----
http://b1.qzone.qq.com/cgi-bin/blog/blog_commentlist.cgi?uin=11854905&amp;{{#x|blogid=39}}&amp;archive=-2
+http://b1.qzone.qq.com/cgi-bin/blog/blog_commentlist.cgi?uin=11854905&amp;{{#x|blogid=38}}&amp;archive=-2
+http://b1.qzone.qq.com/cgi-bin/blog/blog_commentlist.cgi?uin=11854905&amp;{{#x|blogid=37}}&amp;archive=-2
+http://b1.qzone.qq.com/cgi-bin/blog/blog_commentlist.cgi?uin=11854905&amp;{{#x|blogid=36}}&amp;archive=-2
+http://b1.qzone.qq.com/cgi-bin/blog/blog_commentlist.cgi?uin=11854905&amp;{{#x|blogid=35}}&amp;archive=-2
+...
http://b1.qzone.qq.com/cgi-bin/blog/blog_commentlist.cgi?uin=11854905&amp;{{#x|blogid=0}}&amp;archive=-2
----
It means that...
now we can {{#ci|directly}} access Qzone's {{#x|database}},
completely {{#ci|bypassing}} its cumbersome HTML interface!
  
这意味着……
现在我们可以直接访问 Qzone 的数据库
完全绕过它那笨重的 HTML 界面！
----
Let's write a tiny {{#x|Perl}}
{{#ci|script}} to do {{#ci|all}} these tricks
for us!
  
让我们来编写一个小小的 Perl
脚本来为我们实现所有这些把戏。
----
{{img src="images/getqzone.png" width="667" height="334"}}
----
One {{#x|sample output}} of the program
for {{#ci|Cherry}}'s Blogs
  
➥  {{http://perlcabal.org/agent/cherry.html}}
  
该程序针对 Cherry 的博客的一次典型输出
----
{{img src="images/qzone_html.png" width="802" height="593"}}
----
{{img src="images/qzone_html2.png" width="802" height="593"}}
----
This program uses {{#x|LWP::UserAgent}} to {{#ci|get}}
the XML data directly from the web and uses
{{#x|XML::Simple}} to {{#ci|parse}} it.
   
该程序使用 LWP::UserAgent 模块
直接从网上获取 XML 数据，并利用
XML::Simple 解析之。
----
{{#ci|No}} need for Audrey's {{#x|Template::Extract}}
to {{#ci|extract}} data from the HTML source.
That is the {{#ci|power}} of {{#x|AJAX}} and {{#x|XML}}!
   
不再需要唐凤的 Template::Extract 模块来
从 HTML 源码中提取数据。
这就是 AJAX 和 XML 的威力！
----
Get the {{#x|slides}} today!
{{#c|♨}}
    
{{http://perlcabal.org/agent/slides/xmlapp/xmlapp.xul}}
{{http://perlcabal.org/agent/slides/xmlapp/xmlapp.ppt}}
{{http://perlcabal.org/agent/slides/xmlapp/xmlapp.pdf}}
   
You need {{#x|Firefox}} to access the .xul link above.
----
{{#c|Thank you!}}
☺
----
</html:textarea>

<deck flex="1" id="deck">
 <vbox flex="1" onmousemove="Sporx.onMouseMoveOnCanvas(event);">
  <toolbox id="canvasToolbar">
   <toolbar>
    <toolbarbutton oncommand="Sporx.home()" label="|&lt;&lt;" observes="canBack"/>
    <toolbarbutton oncommand="Sporx.back()" label="&lt;" observes="canBack"/>
    <toolbarbutton oncommand="Sporx.forward()" label="&gt;" observes="canForward"/>
    <toolbarbutton oncommand="Sporx.end()" label="&gt;&gt;|" observes="canForward"/>
    <toolbarseparator/>
    <hbox align="center">
     <textbox id="current_page" size="4" oninput="if (this.value) Sporx.showPage(parseInt(this.value)-1);"/>
     <description value="/"/>
     <description id="max_page"/>
    </hbox>
    <toolbarseparator/>
    <vbox flex="2">
     <spacer flex="1"/>
     <scrollbar id="scroller" align="center" orient="horizontal" oncommand="Sporx.showPage(parseInt(event.target.getAttribute('curpos')));" onclick="Sporx.showPage(parseInt(event.target.getAttribute('curpos')));" onmousedown="Sporx.onScrollerDragStart();" onmousemove="Sporx.onScrollerDragMove();" onmouseup="Sporx.onScrollerDragDrop();"/>
     <spacer flex="1"/>
    </vbox>
    <toolbarseparator/>
    <spacer flex="1"/>
    <toolbarseparator/>
    <toolbarbutton id="toggleEva" label="Eva" type="checkbox" autoCheck="false" oncommand="Sporx.toggleEvaMode();"/>
    <toolbarseparator/>
    <toolbarbutton label="Edit" oncommand="Sporx.toggleEditMode();"/>
    <toolbarbutton oncommand="Sporx.reload();" label="Reload"/>
   </toolbar>
  </toolbox>
  <vbox flex="1" id="canvas" onclick="Sporx.onPresentationClick(event);">
   <spacer flex="1"/>
   <hbox flex="1">
    <spacer flex="1"/>
    <vbox id="content"/>
    <spacer flex="1"/>
   </hbox>
   <spacer flex="1"/>
  </vbox>
 </vbox>
 <vbox flex="1" id="edit">
  <toolbox>
   <toolbar>
    <toolbarbutton label="New Page" oncommand="Sporx.addPage()"/>
    <spacer flex="1"/>
    <toolbarseparator/>
    <toolbarbutton label="View" oncommand="Sporx.toggleEditMode();"/>
    <toolbarbutton oncommand="Sporx.reload();" label="Reload"/>
   </toolbar>
  </toolbox>
  <textbox id="textField" flex="1" multiline="true" oninput="Sporx.onEdit()"/>
  <hbox collapsed="true">
   <iframe id="dataLoader" onload="if (window.Sporx) Sporx.onDataLoad();"/>
  </hbox>
 </vbox>
</deck>

<broadcasterset>
 <broadcaster id="canBack"/>
 <broadcaster id="canForward"/>
</broadcasterset>

<commandset>
 <command id="cmd_forward" oncommand="if (Sporx.isPresentationMode) Sporx.forward();"/>
 <command id="cmd_back" oncommand="if (Sporx.isPresentationMode) Sporx.back();"/>
 <command id="cmd_home" oncommand="if (Sporx.isPresentationMode) Sporx.home();"/>
 <command id="cmd_end" oncommand="if (Sporx.isPresentationMode) Sporx.end();"/>
</commandset>

<keyset>
 <key key=" "                   command="cmd_forward"/>
 <key keycode="VK_ENTER"        command="cmd_forward"/>
 <key keycode="VK_RETURN"       command="cmd_forward"/>
 <key keycode="VK_PAGE_DOWN"    command="cmd_forward"/>
 <key keycode="VK_RIGHT"        command="cmd_forward"/>
 <key keycode="VK_DOWN"         command="cmd_forward"/>
 <!--key keycode="VK_BACK_SPACE"   command="cmd_back"/-->
 <key keycode="VK_UP"           command="cmd_back"/>
 <key keycode="VK_PAGE_UP"      command="cmd_back"/>
 <!--<key keycode="VK_BACK_UP"    command="cmd_back"/>-->
 <!--<key keycode="VK_BACK_LEFT"  command="cmd_back"/>-->
 <key keycode="VK_HOME"         command="cmd_home"/>
 <!--<key keycode="VK_END"        command="cmd_end"/>-->

 <key key="n" modifiers="accel" oncommand="Sporx.addPage();"/>
 <key key="r" modifiers="accel" oncommand="window.location.reload();"/>
 <key key="e" modifiers="accel" oncommand="Sporx.toggleEditMode();"/>
 <key key="a" modifiers="accel" oncommand="Sporx.toggleEvaMode();"/>
</keyset>


<script src="lib/sporx.js" type="application/x-javascript" />

</page>

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is the Takahashi-Method-based Presentation Tool in XUL.
   -
   - The Initial Developer of the Original Code is SHIMODA Hiroshi.
   - Portions created by the Initial Developer are Copyright (C) 2005
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s): SHIMODA Hiroshi <piro@p.club.ne.jp>
   -
   - ***** END LICENSE BLOCK ***** -->

