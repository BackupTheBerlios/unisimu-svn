# This file was generated by tslc at Wed Mar 22 17:26:15 2006

use strict;
use warnings;
use Tesla;

#line 11 "lib/std.tm"
sub HalfAdder {
    if (@_ != 4) {
        my ($package, $filename, $line) = caller;
        die "$filename($line): error: ".
            "Component HalfAdder expects 4 arguments.\n";
    }
    my ($X,$Y,$Cout,$Sum) = @_;

#line 12 "lib/std.tm"
my $gate1 = AND->new();
$gate1->output($Cout);
$gate1->inputs($X,$Y);

#line 12 "lib/std.tm"
$X->add_dest($gate1);

#line 12 "lib/std.tm"
$Y->add_dest($gate1);

#line 13 "lib/std.tm"
my $gate2 = XOR->new();
$gate2->output($Sum);
$gate2->inputs($X,$Y);

#line 13 "lib/std.tm"
$X->add_dest($gate2);

#line 13 "lib/std.tm"
$Y->add_dest($gate2);

#line 14 "lib/std.tm"
}

#line 19 "lib/std.tm"
sub FullAdder {
    if (@_ != 5) {
        my ($package, $filename, $line) = caller;
        die "$filename($line): error: ".
            "Component FullAdder expects 5 arguments.\n";
    }
    my ($X,$Y,$Cin,$Cout,$Sum) = @_;

#line 20 "lib/std.tm"
my $sig1 = Signal->new("FullAdder::sig1");

#line 20 "lib/std.tm"
my $sig2 = Signal->new("FullAdder::sig2");

#line 20 "lib/std.tm"
my $sig3 = Signal->new("FullAdder::sig3");

#line 21 "lib/std.tm"
my $gate3 = XOR->new();
$gate3->output($Sum);
$gate3->inputs($X,$Y,$Cin);

#line 21 "lib/std.tm"
$X->add_dest($gate3);

#line 21 "lib/std.tm"
$Y->add_dest($gate3);

#line 21 "lib/std.tm"
$Cin->add_dest($gate3);

#line 22 "lib/std.tm"
my $gate4 = AND->new();
$gate4->output($sig1);
$gate4->inputs($X,$Y);

#line 22 "lib/std.tm"
$X->add_dest($gate4);

#line 22 "lib/std.tm"
$Y->add_dest($gate4);

#line 23 "lib/std.tm"
my $gate5 = AND->new();
$gate5->output($sig2);
$gate5->inputs($X,$Cin);

#line 23 "lib/std.tm"
$X->add_dest($gate5);

#line 23 "lib/std.tm"
$Cin->add_dest($gate5);

#line 24 "lib/std.tm"
my $gate6 = AND->new();
$gate6->output($sig3);
$gate6->inputs($Y,$Cin);

#line 24 "lib/std.tm"
$Y->add_dest($gate6);

#line 24 "lib/std.tm"
$Cin->add_dest($gate6);

#line 25 "lib/std.tm"
my $gate7 = OR->new();
$gate7->output($Cout);
$gate7->inputs($sig1,$sig2,$sig3);

#line 25 "lib/std.tm"
$sig1->add_dest($gate7);

#line 25 "lib/std.tm"
$sig2->add_dest($gate7);

#line 25 "lib/std.tm"
$sig3->add_dest($gate7);

#line 26 "lib/std.tm"
}

#line 31 "lib/std.tm"
sub SRLatch {
    if (@_ != 4) {
        my ($package, $filename, $line) = caller;
        die "$filename($line): error: ".
            "Component SRLatch expects 4 arguments.\n";
    }
    my ($S,$R,$Q,$Qp) = @_;

#line 32 "lib/std.tm"
my $gate8 = NOR->new();
$gate8->output($Q);
$gate8->inputs($R,$Qp);

#line 32 "lib/std.tm"
$R->add_dest($gate8);

#line 32 "lib/std.tm"
$Qp->add_dest($gate8);

#line 33 "lib/std.tm"
my $gate9 = NOR->new();
$gate9->output($Qp);
$gate9->inputs($S,$Q);

#line 33 "lib/std.tm"
$S->add_dest($gate9);

#line 33 "lib/std.tm"
$Q->add_dest($gate9);

#line 34 "lib/std.tm"
EventConsole->add_events( [0], $Q, ['0'] );

#line 35 "lib/std.tm"
EventConsole->add_events( [0], $Qp, ['1'] );

#line 36 "lib/std.tm"
}

#line 41 "lib/std.tm"
sub SRLatchEx {
    if (@_ != 6) {
        my ($package, $filename, $line) = caller;
        die "$filename($line): error: ".
            "Component SRLatchEx expects 6 arguments.\n";
    }
    my ($S,$R,$PreN,$ClrN,$Q,$Qp) = @_;

#line 42 "lib/std.tm"
my $Clr = Signal->new("SRLatchEx::Clr");

#line 42 "lib/std.tm"
my $Pre = Signal->new("SRLatchEx::Pre");

#line 43 "lib/std.tm"
my $gate10 = NOT->new();
$gate10->output($Clr);
$gate10->inputs($ClrN);

#line 43 "lib/std.tm"
$ClrN->add_dest($gate10);

#line 44 "lib/std.tm"
my $gate11 = NOT->new();
$gate11->output($Pre);
$gate11->inputs($PreN);

#line 44 "lib/std.tm"
$PreN->add_dest($gate11);

#line 45 "lib/std.tm"
my $gate12 = NOR->new();
$gate12->output($Q);
$gate12->inputs($Clr,$R,$Qp);

#line 45 "lib/std.tm"
$Clr->add_dest($gate12);

#line 45 "lib/std.tm"
$R->add_dest($gate12);

#line 45 "lib/std.tm"
$Qp->add_dest($gate12);

#line 46 "lib/std.tm"
my $gate13 = NOR->new();
$gate13->output($Qp);
$gate13->inputs($Pre,$S,$Q);

#line 46 "lib/std.tm"
$Pre->add_dest($gate13);

#line 46 "lib/std.tm"
$S->add_dest($gate13);

#line 46 "lib/std.tm"
$Q->add_dest($gate13);

#line 47 "lib/std.tm"
EventConsole->add_events( [0], $Q, ['0'] );

#line 48 "lib/std.tm"
EventConsole->add_events( [0], $Qp, ['1'] );

#line 49 "lib/std.tm"
}

#line 54 "lib/std.tm"
sub DLatch {
    if (@_ != 4) {
        my ($package, $filename, $line) = caller;
        die "$filename($line): error: ".
            "Component DLatch expects 4 arguments.\n";
    }
    my ($D,$G,$Q,$Qp) = @_;

#line 55 "lib/std.tm"
my $S = Signal->new("DLatch::S");

#line 55 "lib/std.tm"
my $R = Signal->new("DLatch::R");

#line 55 "lib/std.tm"
my $Dp = Signal->new("DLatch::Dp");

#line 56 "lib/std.tm"
my $gate14 = NOT->new();
$gate14->output($Dp);
$gate14->inputs($D);

#line 56 "lib/std.tm"
$D->add_dest($gate14);

#line 57 "lib/std.tm"
my $gate15 = AND->new();
$gate15->output($S);
$gate15->inputs($D,$G);

#line 57 "lib/std.tm"
$D->add_dest($gate15);

#line 57 "lib/std.tm"
$G->add_dest($gate15);

#line 58 "lib/std.tm"
my $gate16 = AND->new();
$gate16->output($R);
$gate16->inputs($Dp,$G);

#line 58 "lib/std.tm"
$Dp->add_dest($gate16);

#line 58 "lib/std.tm"
$G->add_dest($gate16);

#line 59 "lib/std.tm"
SRLatch($S,$R,$Q,$Qp);

#line 60 "lib/std.tm"
}

#line 62 "lib/std.tm"
sub GatedDLatch {
    if (@_ != 4) {
        my ($package, $filename, $line) = caller;
        die "$filename($line): error: ".
            "Component GatedDLatch expects 4 arguments.\n";
    }
    my ($D,$G,$Q,$Qp) = @_;

#line 63 "lib/std.tm"
DLatch($D,$G,$Q,$Qp);

#line 64 "lib/std.tm"
}

#line 69 "lib/std.tm"
sub DLatchEx {
    if (@_ != 6) {
        my ($package, $filename, $line) = caller;
        die "$filename($line): error: ".
            "Component DLatchEx expects 6 arguments.\n";
    }
    my ($D,$G,$PreN,$ClrN,$Q,$Qp) = @_;

#line 70 "lib/std.tm"
my $S = Signal->new("DLatchEx::S");

#line 70 "lib/std.tm"
my $R = Signal->new("DLatchEx::R");

#line 70 "lib/std.tm"
my $Dp = Signal->new("DLatchEx::Dp");

#line 71 "lib/std.tm"
my $gate17 = NOT->new();
$gate17->output($Dp);
$gate17->inputs($D);

#line 71 "lib/std.tm"
$D->add_dest($gate17);

#line 72 "lib/std.tm"
my $gate18 = AND->new();
$gate18->output($S);
$gate18->inputs($D,$G);

#line 72 "lib/std.tm"
$D->add_dest($gate18);

#line 72 "lib/std.tm"
$G->add_dest($gate18);

#line 73 "lib/std.tm"
my $gate19 = AND->new();
$gate19->output($R);
$gate19->inputs($Dp,$G);

#line 73 "lib/std.tm"
$Dp->add_dest($gate19);

#line 73 "lib/std.tm"
$G->add_dest($gate19);

#line 74 "lib/std.tm"
SRLatchEx($S,$R,$PreN,$ClrN,$Q,$Qp);

#line 75 "lib/std.tm"
}

#line 77 "lib/std.tm"
sub GatedDLatchEx {
    if (@_ != 6) {
        my ($package, $filename, $line) = caller;
        die "$filename($line): error: ".
            "Component GatedDLatchEx expects 6 arguments.\n";
    }
    my ($D,$G,$PreN,$ClrN,$Q,$Qp) = @_;

#line 78 "lib/std.tm"
DLatchEx($D,$G,$PreN,$ClrN,$Q,$Qp);

#line 79 "lib/std.tm"
}

#line 84 "lib/std.tm"
sub GatedSRLatch {
    if (@_ != 5) {
        my ($package, $filename, $line) = caller;
        die "$filename($line): error: ".
            "Component GatedSRLatch expects 5 arguments.\n";
    }
    my ($S,$G,$R,$Q,$Qp) = @_;

#line 85 "lib/std.tm"
my $S1 = Signal->new("GatedSRLatch::S1");

#line 85 "lib/std.tm"
my $R1 = Signal->new("GatedSRLatch::R1");

#line 86 "lib/std.tm"
my $gate20 = AND->new();
$gate20->output($S1);
$gate20->inputs($S,$G);

#line 86 "lib/std.tm"
$S->add_dest($gate20);

#line 86 "lib/std.tm"
$G->add_dest($gate20);

#line 87 "lib/std.tm"
my $gate21 = AND->new();
$gate21->output($R1);
$gate21->inputs($R,$G);

#line 87 "lib/std.tm"
$R->add_dest($gate21);

#line 87 "lib/std.tm"
$G->add_dest($gate21);

#line 88 "lib/std.tm"
SRLatch($S1,$R1,$Q,$Qp);

#line 89 "lib/std.tm"
}

#line 94 "lib/std.tm"
sub DFlipFlop {
    if (@_ != 4) {
        my ($package, $filename, $line) = caller;
        die "$filename($line): error: ".
            "Component DFlipFlop expects 4 arguments.\n";
    }
    my ($D,$Ck,$Q,$Qp) = @_;

#line 95 "lib/std.tm"
my $CkN = Signal->new("DFlipFlop::CkN");

#line 95 "lib/std.tm"
my $P = Signal->new("DFlipFlop::P");

#line 95 "lib/std.tm"
my $Pp = Signal->new("DFlipFlop::Pp");

#line 96 "lib/std.tm"
my $gate22 = NOT->new();
$gate22->output($CkN);
$gate22->inputs($Ck);

#line 96 "lib/std.tm"
$Ck->add_dest($gate22);

#line 97 "lib/std.tm"
DLatch($D,$CkN,$P,$Pp);

#line 98 "lib/std.tm"
DLatch($P,$Ck,$Q,$Qp);

#line 99 "lib/std.tm"
}

#line 104 "lib/std.tm"
sub DFlipFlopEx {
    if (@_ != 6) {
        my ($package, $filename, $line) = caller;
        die "$filename($line): error: ".
            "Component DFlipFlopEx expects 6 arguments.\n";
    }
    my ($D,$Ck,$PreN,$ClrN,$Q,$Qp) = @_;

#line 105 "lib/std.tm"
my $CkN = Signal->new("DFlipFlopEx::CkN");

#line 105 "lib/std.tm"
my $P = Signal->new("DFlipFlopEx::P");

#line 105 "lib/std.tm"
my $Pp = Signal->new("DFlipFlopEx::Pp");

#line 106 "lib/std.tm"
my $gate23 = NOT->new();
$gate23->output($CkN);
$gate23->inputs($Ck);

#line 106 "lib/std.tm"
$Ck->add_dest($gate23);

#line 107 "lib/std.tm"
DLatchEx($D,$CkN,$PreN,$ClrN,$P,$Pp);

#line 108 "lib/std.tm"
DLatchEx($P,$Ck,$PreN,$ClrN,$Q,$Qp);

#line 109 "lib/std.tm"
}

#line 114 "lib/std.tm"
sub SRFlipFlop {
    if (@_ != 5) {
        my ($package, $filename, $line) = caller;
        die "$filename($line): error: ".
            "Component SRFlipFlop expects 5 arguments.\n";
    }
    my ($S,$Ck,$R,$Q,$Qp) = @_;

#line 115 "lib/std.tm"
my $CkN = Signal->new("SRFlipFlop::CkN");

#line 115 "lib/std.tm"
my $S1 = Signal->new("SRFlipFlop::S1");

#line 115 "lib/std.tm"
my $R1 = Signal->new("SRFlipFlop::R1");

#line 115 "lib/std.tm"
my $P = Signal->new("SRFlipFlop::P");

#line 115 "lib/std.tm"
my $Pp = Signal->new("SRFlipFlop::Pp");

#line 116 "lib/std.tm"
my $gate24 = NOT->new();
$gate24->output($CkN);
$gate24->inputs($Ck);

#line 116 "lib/std.tm"
$Ck->add_dest($gate24);

#line 117 "lib/std.tm"
my $gate25 = AND->new();
$gate25->output($S1);
$gate25->inputs($S,$CkN);

#line 117 "lib/std.tm"
$S->add_dest($gate25);

#line 117 "lib/std.tm"
$CkN->add_dest($gate25);

#line 118 "lib/std.tm"
my $gate26 = AND->new();
$gate26->output($R1);
$gate26->inputs($R,$CkN);

#line 118 "lib/std.tm"
$R->add_dest($gate26);

#line 118 "lib/std.tm"
$CkN->add_dest($gate26);

#line 119 "lib/std.tm"
SRLatch($S1,$R1,$P,$Pp);

#line 121 "lib/std.tm"
my $S2 = Signal->new("SRFlipFlop::S2");

#line 121 "lib/std.tm"
my $R2 = Signal->new("SRFlipFlop::R2");

#line 122 "lib/std.tm"
my $gate27 = AND->new();
$gate27->output($S2);
$gate27->inputs($P,$Ck);

#line 122 "lib/std.tm"
$P->add_dest($gate27);

#line 122 "lib/std.tm"
$Ck->add_dest($gate27);

#line 123 "lib/std.tm"
my $gate28 = AND->new();
$gate28->output($R2);
$gate28->inputs($Pp,$Ck);

#line 123 "lib/std.tm"
$Pp->add_dest($gate28);

#line 123 "lib/std.tm"
$Ck->add_dest($gate28);

#line 124 "lib/std.tm"
SRLatch($S2,$R2,$Q,$Qp);

#line 125 "lib/std.tm"
}

#line 130 "lib/std.tm"
sub JKFlipFlop {
    if (@_ != 5) {
        my ($package, $filename, $line) = caller;
        die "$filename($line): error: ".
            "Component JKFlipFlop expects 5 arguments.\n";
    }
    my ($J,$Ck,$K,$Q,$Qp) = @_;

#line 131 "lib/std.tm"
my $CkN = Signal->new("JKFlipFlop::CkN");

#line 131 "lib/std.tm"
my $S1 = Signal->new("JKFlipFlop::S1");

#line 131 "lib/std.tm"
my $R1 = Signal->new("JKFlipFlop::R1");

#line 131 "lib/std.tm"
my $P = Signal->new("JKFlipFlop::P");

#line 131 "lib/std.tm"
my $Pp = Signal->new("JKFlipFlop::Pp");

#line 132 "lib/std.tm"
my $gate29 = NOT->new();
$gate29->output($CkN);
$gate29->inputs($Ck);

#line 132 "lib/std.tm"
$Ck->add_dest($gate29);

#line 133 "lib/std.tm"
my $gate30 = AND->new();
$gate30->output($S1);
$gate30->inputs($Qp,$J,$CkN);

#line 133 "lib/std.tm"
$Qp->add_dest($gate30);

#line 133 "lib/std.tm"
$J->add_dest($gate30);

#line 133 "lib/std.tm"
$CkN->add_dest($gate30);

#line 134 "lib/std.tm"
my $gate31 = AND->new();
$gate31->output($R1);
$gate31->inputs($Q,$K,$CkN);

#line 134 "lib/std.tm"
$Q->add_dest($gate31);

#line 134 "lib/std.tm"
$K->add_dest($gate31);

#line 134 "lib/std.tm"
$CkN->add_dest($gate31);

#line 135 "lib/std.tm"
SRLatch($S1,$R1,$P,$Pp);

#line 137 "lib/std.tm"
my $S2 = Signal->new("JKFlipFlop::S2");

#line 137 "lib/std.tm"
my $R2 = Signal->new("JKFlipFlop::R2");

#line 138 "lib/std.tm"
my $gate32 = AND->new();
$gate32->output($S2);
$gate32->inputs($P,$Ck);

#line 138 "lib/std.tm"
$P->add_dest($gate32);

#line 138 "lib/std.tm"
$Ck->add_dest($gate32);

#line 139 "lib/std.tm"
my $gate33 = AND->new();
$gate33->output($R2);
$gate33->inputs($Pp,$Ck);

#line 139 "lib/std.tm"
$Pp->add_dest($gate33);

#line 139 "lib/std.tm"
$Ck->add_dest($gate33);

#line 140 "lib/std.tm"
SRLatch($S2,$R2,$Q,$Qp);

#line 141 "lib/std.tm"
}

#line 146 "lib/std.tm"
sub TFlipFlop {
    if (@_ != 4) {
        my ($package, $filename, $line) = caller;
        die "$filename($line): error: ".
            "Component TFlipFlop expects 4 arguments.\n";
    }
    my ($T,$Ck,$Q,$Qp) = @_;

#line 147 "lib/std.tm"
JKFlipFlop($T,$Ck,$T,$Q,$Qp);

#line 148 "lib/std.tm"
}

1;
