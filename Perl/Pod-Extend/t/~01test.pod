=head1 NAME

comb - Combinatorics

=head1 Preparations

为了方便起见, 我们先定义一些 Maple 函数.

首先是组合数函数 C<C>:

I<Maple>

    C:=(n,m)->binomial(n,m):

I<No Output>

然后是排列数的计算函数 C<P>:

I<Maple>

    P:=(n,m)->n!/(n-m)!:

I<No Output>

我们下面来简单地测试一下组合数函数:

I<Maple>

    seq(C(4,i),i=0..4);

I<Output>:

    1, 4, 6, 4, 1

然后是排列数函数:

I<Maple>

    seq(P(4,i),i=0..4);

I<Output>:

    1, 4, 12, 24, 24

=head1 Verifications

=over

=item * 1000! 后有多少个0？

1000! 可真的是一个天文数字，但令人惊愕的是 Maple 计算起来非常轻松，而且
还是在我的 300 MHz 的老机器上！由于 1000! 的结果打印出来会占用大量的篇
幅，因此我们只让 Perl 数一下末尾的 0 的个数：

I<Perl>

    my $num = $maple->eval('1000!');
    $num =~ /(0+)$/ ? length($1) : 0;

I<Output>:

    249

而在理论计算的时候，我们是看 1000! 的所有质因子当中有多少对 2 和 5.

Maple 的 ifactor 函数可以直接对一个整数进行质因数分解, 比如

I<Maple>

    ifactor(7!);

I<Output>:

    ``(2)^4*``(3)^2*``(5)*``(7)

注意, Maple 在这儿使用 I<empty symbol> (``) 来阻止有理数表达式的自动
化简行为. 

为了方便起见, 我们利用 Maple 的 ifactor 函数来实现一个
数质因子个数的 Perl 例程:

I<Perl>

    sub num_of_factors {
        my ($num, $factor) = @_;
        local $_ = $maple->ifactor($num);
        return $1 if /\($factor\)\^(\d+)/;
        return 1 if /\($factor\)/;
        0;
    }

I<No Output>

我们先用它来测试一下前面 7! 的质因数分解结果:

看看 7! 中有多少个质因子 2 ?

I<Perl>

    num_of_factors('7!', 2)

I<Output>:

    4

有多少个 5 ?

I<Perl>

    num_of_factors('7!', 5)

I<Output>:

    1

又有多少个 11 呢?

I<Perl>

    num_of_factors('7!', 11)

I<Output>:

    0

下面我们就来数一下 1000! 当中有多少个 2, 又有多少个 5:

I<Perl>

    num_of_factors('1000!', 2)

I<Output>:

    994

I<Perl>

    num_of_factors('1000!', 5)

I<Output>:

    249

我们看到，一共有 249 对 2 和 5. 于是 1000! 后面有 249 个 0.

对于手工计算而言, 求 n! 中质因子 k 的个数, 可以使用如下算法:

I<Maple>

    num_factors := 
        proc(n, k)
            local c, val, i;
            c := 0;
            for i from 1 to infinity
            do
                val := floor(n/k^i);
                if val = 0 then break end if;
                c := c + val;
            end do;
            c;
        end proc:

I<No Output>

我们现在用它来求 1000! 中含有的质因子 5 的个数:

I<Maple>

    num_factors(1000, 5);

I<Output>:

    249

=item * 有多少大于 5400 且满足 (1) 每位数上的数值各不相同, (2) 2 和 7 不出现,
这两个性质的整数？

我们先看看满足这些条件的B<四位>整数有多少：

I<Perl>

    my $c = 0;
    for (1000..9999) {
        next if /(\d).*\1/ or /[27]/;
        $c++ if $_ > 5400;
    }
    $c;

I<Output>:

    750

而我们理论计算的结果是

I<Maple>

    C(4,1)*P(6,2) + C(3,1)*P(7,3);

I<Output>:

    750

再来看看B<五位>整数有多少：

I<Perl>

    my $c = 0;
    for (10000..99999) {
        next if /[27]/ or /(\d).*\1/;
        $c++ if $_ > 5400;
    }
    $c;

I<Output>:

    5880

而理论计算的结果是

I<Maple>

    C(7,1)*P(7,4);

I<Output>:

    5880

=item * 求恰好有 28 个因子的最小正整数.

给定一个自然数, 要求其所有的因子, 基本思路是先对它进行质因数
分解, 然后对所有的质因子(重复的也包括在内)进行任意的组合. 每
一种不同的质因子组合, 其乘积便是原数的一个因子. 如果能得到所
有可能的组合, 我们便可以求出其所有的因子.

我们以 28 为例. 28 分解质因子的结果为

I<Maple>

    ifactor(28);

I<Output>:

    ``(2)^2*``(7)

然后我们在 Perl 上下文中将质因子提取出来:

I<Perl>

    my $num = $maple->ifactor(28);
    $num =~ s/``//g;
    @factors = split /\*/, $num;

I<Output>:

    (2)^2,(7)

接下来我们构造出所有质因子的组合所对应的母函数:

I<Perl>

    map {
        s/^ \( \d+ \) $/$&^1/x;
        s/^ \( (\d+) \) \^ (\d+) $/sum(x$1^i,i=0..$2)/x;
    } @factors;
    $exp = join('*', @factors);

I<Output>:

    sum(x2^i,i=0..2)*sum(x7^i,i=0..1)

我们将母函数展开:

I<Perl>

    $exp = $maple->expand($exp);

I<Output>:

    1+x7+x2+x2*x7+x2^2+x2^2*x7

最后, 我们从母函数的展开式中提取出所有的因子组合:

I<Perl>

    sort { $a <=> $b }
        map {
            s/x(\d+)/$1/g;
            $maple->eval($_);
        } split /\+/, $exp;

I<Output>:

    1,2,4,7,14,28

将上面给出的代码片段拼接起来, 我们便可以得到因子构造的 Perl 实现:

I<Perl>

    sub factors {
        my $num = $maple->ifactor(shift);
        $num =~ s/``//g;
        my @factors = split /\*/, $num;
        map {
            s/^ \( \d+ \) $/$&^1/x;
            s/^ \( (\d+) \) \^ (\d+) $/sum(x$1^i,i=0..$2)/x;
        } @factors;
        $exp = join('*', @factors);
        $exp = $maple->expand($exp);
        @factors =
            sort { $a <=> $b }
                map {
                    s/x(\d+)/$1/g;
                    $maple->eval($_);
                } split /\+/, $exp;
        return wantarray ? @factors : scalar(@factors);
    }

I<No Output>

我们对这个函数简单地进行一下测试:

I<Perl>

    factors(28)

I<Output>:

    1,2,4,7,14,28

I<Perl>

    factors(6)

I<Output>:

    1,2,3,6

I<Perl>

    factors(2)

I<Output>:

    1,2

I<Perl>

    factors(1)

I<Output>:

    1

本题理论计算的结果是

I<Maple>

    min( 2^(28-1), 2^(14-1)*3^(2-1), 2^(7-1)*3^(4-1), 2^(7-1)*3^(2-1)*5^(2-1));

I<Output>:

    960

=back

我们来看看 960 的因子数是不是 28 个:

I<Perl>

    @factors = factors(960)

I<Output>:

    1,2,3,4,5,6,8,10,12,15,16,20,24,30,32,40,48,60,64,80,96,120,160,192,240,320,480,960

这些因子共有

I<Perl>

    scalar(@factors)

I<Output>:

    28

个.

我们检查一下比 960 小的正整数中有没有刚好有 28 个因子的:

I<Perl>

    use List::Util 'first';
    first { factors($_) == 28 } 1..959;

I<No Output>

