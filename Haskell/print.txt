NISolve.hs
==========
-- NISolve.hs
-- Evaluate the root of an equation using
--   Newton's Iteration Method
-- Copyright (c) 2005 Agent Zhang
-- 2005-09-26 2005-09-26

module NISolve where

next x f f' = x - f x / f' x

repeat' x f f' = x : repeat' (next x f f') f f'

nsolve x0 f f' cond = cond $ repeat' x0 f f'

-- Starting of the usual part for error control --

within eps (a:a':as)
    | abs(a-a') <= eps = a'
    | otherwise        = within eps (a':as)

within' eps (a:a':as)
    | abs(a-a') <= eps = 1
    | otherwise        = 1 + within' eps (a':as)

-- End of the ususal part --

f x  = x*(x+1)^2 - 1
f' x = (x + 1)*(3*x + 1)

test1   = nsolve 0.4 f f' (within  0.00005)
test1'  = nsolve 0.4 f f' (within' 0.00005)
test1'' = take 4 (repeat' 0.4 f f')

g x  = x^2 - 135.607
g' x = 2*x

test2   = nsolve 12 g g' (within  0.000005)
test2'  = nsolve 12 g g' (within' 0.000005)
test2'' = take 4 (repeat' 12 g g')

h  x = x^5 - 235.4
h' x = 5 * x^4

test3   = nsolve 4 h h' (within  0.0005)
test3'  = nsolve 4 h h' (within' 0.0005)
test3'' = take 6 (repeat' 4 h h')

test4  x0 = nsolve x0 h h' (within  0.0005)
test4' x0 = nsolve x0 h h' (within' 0.0005)

{-

-}




NISolve.out
===========
NISolve> test1
0.465571232262535
NISolve> test1'
3
NISolve> test1''
[0.4,0.47012987012987,0.46559120520335,0.465571232262535]
NISolve> test2
11.6450418633855
NISolve> test2'
3
NISolve> test2''
[12.0,11.6502916666667,11.6450430462071,11.6450418633855]
NISolve> test3
2.98099530288531
NISolve> test3'
5
NISolve> test3''
[4.0,3.38390625,3.06618180656813,2.98559901827501,2.98100947849264,2.98099530288
531]
NISolve> test4 0.0001
2.98099531193236
NISolve> test4' 0.0001
182
NISolve> test4 1234
2.98099530275747
NISolve> test4' 1234
31
NISolve>



SecSolve.hs
===========
-- SecSolve.hs
-- Evaluate the root of an equation using
--   Secant Method
-- Copyright (c) 2005 Agent Zhang
-- 2005-09-26 2005-09-26

module SecSolve where

next x x' f = x' - f x' * (x' - x) / (f x' - f x)

repeat' x x' f = x : repeat' x' (next x x' f) f

ssolve x0 x1 f cond = cond $ repeat' x0 x1 f

-- Starting of the usual part for error control --

within eps (a:a':as)
    | abs(a-a') <= eps = a'
    | otherwise        = within eps (a':as)

within' eps (a:a':as)
    | abs(a-a') <= eps = 1
    | otherwise        = 1 + within' eps (a':as)

relative eps (a:a':as)
    | abs(a-a') <= eps * abs a' = a'
    | otherwise                 = relative eps (a':as)

relative' eps (a:a':as)
    | abs(a-a') <= eps * abs a' = 1
    | otherwise                 = 1 + relative' eps (a':as)

-- End of the ususal part --

f x  = x*(x + 1)^2 - 1

test1   = ssolve 0.4 0.6 f (within  0.00005)
test1'  = ssolve 0.4 0.6 f (within' 0.00005)
test1'' = take 6 (repeat' 0.4 0.6 f)

g x  = x^3 - 2*x - 5

test2   = ssolve 2 2.2 g (within  0.0005)
test2'  = ssolve 2 2.2 g (within' 0.0005)
test2'' = take 5 (repeat' 2 2.2 g)

{-

-}



SecSolve.out
============
SecSolve> test1
0.465571224650385
SecSolve> test1'
5
SecSolve> test1''
[0.4,0.6,0.457446808510638,0.464599255082285,0.465578915171487,0.465571224650385
]
SecSolve> test2
2.09455248518528
SecSolve> test2'
4
SecSolve> test2''
[2.0,2.2,2.08896797153025,2.09423295637861,2.09455248518528]