----
{{#t|The Art of Naming}}
----
The Art of {{#x|Naming}}
{{#x|命名}}的艺术
☺{{#ci|Agent Zhang}}☺
{{#date|2006.9}}
----
Why naming {{#ci|matters}}?
  
为什么命名很{{#ci|重要}}？
----
{{#ci|Good}} hackers
➥ {{#x|poets}} and {{#x|wordsmiths}}
  
好的黑客
➥ 诗人和词汇大师
----
A {{#ci|poetry}} in Pugs' {{#x|Main.hs}}  {{#tag|⇒}}
 
  
Pugs 的 Main.hs 中的英文诗歌  {{#tag|⇒}}
----
    A {{#ci|ship}} then new they built for {{#ci|him}}
    Of {{#x|mithril}} and of {{#x|elven-glass}}
    With shining prow; no shaven oar
    Nor sail {{#ci|she}} bore on silver mast;
    The Silmaril as {{#x|lantern light}}
    And banner bright with {{#x|living flame}}
    To gleam thereon by Elbereth
    {{#ci|Herself}} was set, who thither came...
----
XXX 中文译文
----
Perl 6 {{#ci|translation}} ⇒
  
{{#ci|翻译}}到 Perl 6 编程语言 ⇒
----
    {{#kw|use}} v6;
    {{#kw|for}} {{#v|$*Larry}} {
        {{#kw|our}} Ship {{#v|$pugs}} .= {{#kw|new}}(:of{{#x|<mithril elven-glass>}});
        {{#kw|given}} {{#v|$pugs}} {
            {{#v|$.prow}} {{#kw|does}} Shine;
            Silver {{#v|$.mast}} {{#kw|but}} none(Oar::Shaven, Sail);
            Light  {{#v|$.lantern}} := {{#v|$*Silmaril}};
            Bright {{#v|$.banner}}  := Flame.bless:{};
            {{#kw|when}} {{#v|$*Elbereth}}.gleam {
                .sail(...);
            }
        }
    }
----
{{#ci|Top}} Programmers take {{#x|naming}} issues
very seriously
  
顶级的黑客对命名问题
非常认真。
----
as seen on the {{#ci|#perl6}} channel
of {{#x|irc.freenode.net}}...
  
  
正如在 irc.freenode.net 上的 #perl6 通道里
所看见的那样……
----
 {{#v|<agentzh>}}  TimToady++  # JIT syn fixes
 {{#v|<TimToady>}} thanks
 {{#v|<TimToady>}} I looked at {{#ci|several hundred}} words
              before picking START.
   
    
 {{#v|<章亦春>}}     (Larry Wall)++  # 即时 Perl 6 文档修改
 {{#v|<Larry Wall>}} 谢谢
 {{#v|<Larry Wall>}} 我在挑选出 START 这个名字之前查看了
               {{#ci|几百个}}单词。
----
{{img src="#" width="0" height="0"}}
{{img src="images/larry.jpg" width="240" height="392"}}
----
 {{#v|<gaal>}} defer? slothlike
 {{#v|<audreyt>}} I like \"defer\"
 {{#v|<audreyt>}} gaal++
 * audreyt deletes Data::Thunk and uploads Data::Defer
 {{#v|<audreyt>}} ...and it's now Scalar::Defer
 {{#v|<audreyt>}} {{#ci|naming}} takes {{#ci|more}} time than tests+doc+code
   
  
 {{#v|<gaal>}} defer 怎么样? 有些惰性的味道
 {{#v|<唐凤>}} 我喜欢“defer”
 {{#v|<唐凤>}} gaal++
 * 唐凤删除了 Data::Thunk 并上传了 Data::Defer
 {{#v|<唐凤>}} ……现在它叫做 Scalar::Defer 了
 {{#v|<唐凤>}} {{#ci|命名}}所花费的时间比测试 + 文档 + 实现代码{{#ci|还要多}}
----
{{img src="images/audrey.jpg" width="480" height="403"}}
----
☆ Follow the {{#x|naming convention}}
of the language {{#ci|you}} are using.
  
遵循你所使用的语言
的命名约定。
----
 // C++ STL naming style
 {{#x|vector}}<{{#x|string}}> list;
 list.{{#ci|push_back}}(\"hello\");
 while (!list.{{#ci|empty}}()) {...}
----
 // Java naming style
 {{#x|List}} list = new {{#x|ArrayList}}();
 list.{{#ci|add}}(\"hello\");
 while (!list.{{#ci|isEmpty}}()) {...}
----
 // C# naming style
 {{#x|ArrayList}} myAL = new {{#x|ArrayList}}();
 myAL.{{#ci|Add}}(\"hello\");
 Console.{{#ci|WriteLine}}(myAL.{{#ci|ToString}}());
----
☆ Use {{#ci|meaningful}} names
  
使用{{#ci|有意义}}的名字
----
 {{#ci|?}}  Button {{#x|button1}} = new Button(\"New\");
 {{#ci|?}}  Button {{#x|button2}} = new Button(\"Open\");
 {{#ci|?}}  Button {{#x|button3}} = new Button(\"Save\");
   
+{{#x|☹}} This is {{#ci|bad}}.
----
 {{#ci|?}}  Button {{#x|button_New}}  = new Button(\"New\");
 {{#ci|?}}  Button {{#x|button_Open}} = new Button(\"Open\");
 {{#ci|?}}  Button {{#x|button_Save}} = new Button(\"Save\");
   
+{{#x|☹}} This is {{#ci|ugly}}.
----
   Button {{#x|btnNew}}  = new Button(\"New\");
   Button {{#x|btnOpen}} = new Button(\"Open\");
   Button {{#x|btnSave}} = new Button(\"Save\");
   
+{{#x|☺}} This is {{#ci|good}}.
----
The {{#x|Ugly}}, the {{#x|Bad}}, and the {{#x|Good}}
  
丑的，坏的，好的
----
☆ Choose {{#ci|nouns}} for
your {{#x|class}} names
  
从名词中为你的类取名
----
 class {{#x|Evaluator}} { ... }
 class {{#x|Solver}} { ... }
 class {{#x|Withdrawal}} { ... }
   
+{{#x|☺}} These are {{#ci|good}}.
----
 {{#ci|?}}  class {{#x|Evaluate}} { ... }
 {{#ci|?}}  class {{#x|Solve}} { ... }
 {{#ci|?}}  class {{#x|Withdraw}} { ... }
   
+{{#x|☹}} These are {{#ci|bad}}.
----
 {{#v|# The following class/module names are also good:}}
 {{#kw|package}} CGI::Simple;
 {{#kw|package}} XML::Smart;
 {{#kw|package}} Class::DBI::Sweet;
 {{#kw|package}} Test::Easy;
----
☆ Choose active {{#ci|verbs}} for
your {{#x|method}} names
  
从主动动词中为你的方法取名
----
 $dbh = DBI.{{#x|connect}}('dbi:odbc:qqbase');
 $dbh.{{#x|commit}}();
 $account.{{#x|update}}(balance => 100);
   
+{{#x|☺}} These are {{#ci|good}}.
----
 {{#ci|?}}  $dbh = DBI.{{#x|connection}}('dbi:odbc:qqbase');
 {{#ci|?}}  $dbh.{{#x|committing}}();
 {{#ci|?}}  $account.{{#x|updated}}(balance => 100);
   
+{{#x|☹}} These are {{#ci|bad}}.
----
☆ Choose {{#ci|nouns}} or {{#ci|adjectives}} for
your {{#x|property}} names
  
从名词或者形容词中为你的属性取名
----
  @list.{{#x|length}}
  $persion.{{#x|name}}
  {{#kw|if}} $dbh.{{#x|available}} { ... }
  die {{#kw|if}} $set.{{#x|is_empty}};
  
+{{#x|☺}} These are {{#ci|good}}.
----
☆ Use {{#x|namespaces}} to split your
{{#ci|verbose}} class names.
  
使用命名空间来分割你冗长的类名。
----
 {{#ci|?}}  class {{#x|Makefile_Parser_AST_Element}} {
 {{#ci|?}}      ...
 {{#ci|?}}  }
 {{#ci|?}}  {{#x|Makefile_Parser_AST_Element}} elem();
  
+{{#x|☹}} This is {{#ci|ugly}}.
----
  namespace {{#x|Makefile::Parser::AST}} {
      class {{#x|Element}} { ... }
  }
  {{#x|Makefile::Parser::AST::Element}} elem();
   
+{{#x|☺}} This is {{#ci|good}}.
----
☆ Improper {{#x|abbreviations}} can be
{{#ci|very confusing}}.
  
不恰当的缩写名可能会让人
非常迷糊。
----
 {{#v|<Sal>}}      what is \"{{#x|JQL}}\"?
 {{#v|<clkao>}}    {{#x|J}}abberwocky {{#x|Q}}uery {{#x|L}}anguage?
 {{#v|<TimToady>}} {{#x|J}}ust {{#x|Q}}uack {{#x|L}}oudly?
 {{#v|<audreyt>}}  {{#x|J}}unctional {{#x|Q}}uantum {{#x|L}}ibrary?
  
  
 {{#v|<仲伟祥>}}      什么是“{{#x|JQL}}”？
 {{#v|<高嘉良>}}      废话查询语言？
 {{#v|<Larry Wall>}} 不过是高声吹嘘？
 {{#v|<唐凤>}}        联结性量子库？
----




----
Get the {{#x|slides}} today!
{{#c|♨}}
    
{{http://perlcabal.org/agent/slides/naming/naming.xul}}
----
These slides are
{{#ci|powered}} by
+{{#x|Sporx}} and...
----
 {{img src="images/grin.png" width="65" height="65"}}
{{#ci|Takahashi}}{{#x|++}}
----
Most of the {{#x|images}} used here
were {{#ci|dawn}} by
+{{#i|StarUML}}
----
{{#c|Thank you!}}
☺
