=head1 NAME

comb - Combinatorics

=head1 Preparations

为了方便起见, 我们先定义一些 Maple 函数.

首先是组合数函数 C<C>:

=Maple C:=(n,m)->binomial(n,m):

然后是排列数的计算函数 C<P>:

=Maple P:=(n,m)->n!/(n-m)!:

我们下面来简单地测试一下组合数函数:

=maple seq(C(4,i),i=0..4);

然后是排列数函数:

=maple seq(P(4,i),i=0..4);

=head1 Verifications

=over

=item * 1000! 后有多少个0？

1000! 可真的是一个天文数字，但令人惊愕的是 Maple 计算起来非常轻松，而且
还是在我的 300 MHz 的老机器上！由于 1000! 的结果打印出来会占用大量的篇
幅，因此我们只让 Perl 数一下末尾的 0 的个数：

=begin Perl

my $num = $maple->eval('1000!');
$num =~ /(0+)$/ ? length($1) : 0;

=end Perl

而在理论计算的时候，我们是看 1000! 的所有质因子当中有多少对 2 和 5.

Maple 的 ifactor 函数可以直接对一个整数进行质因数分解, 比如

=Maple ifactor(7!);

注意, Maple 在这儿使用 I<empty symbol> (``) 来阻止有理数表达式的自动
化简行为. 

为了方便起见, 我们利用 Maple 的 ifactor 函数来实现一个
数质因子个数的 Perl 例程:

=begin Perl

sub num_of_factors {
    my ($num, $factor) = @_;
    local $_ = $maple->ifactor($num);
    return $1 if /\($factor\)\^(\d+)/;
    return 1 if /\($factor\)/;
    0;
}

=end Perl

我们先用它来测试一下前面 7! 的质因数分解结果:

看看 7! 中有多少个质因子 2 ?

=Perl num_of_factors('7!', 2)

有多少个 5 ?

=Perl num_of_factors('7!', 5)

又有多少个 11 呢?

=Perl num_of_factors('7!', 11)

下面我们就来数一下 1000! 当中有多少个 2, 又有多少个 5:

=Perl num_of_factors('1000!', 2)

=Perl num_of_factors('1000!', 5)

我们看到，一共有 249 对 2 和 5. 于是 1000! 后面有 249 个 0.

对于手工计算而言, 求 n! 中质因子 k 的个数, 可以使用如下算法:

=begin Maple

num_factors := 
    proc(n, k)
        local c, val, i;
        c := 0;
        for i from 1 to infinity
        do
            val := floor(n/k^i);
            if val = 0 then break end if;
            c := c + val;
        end do;
        c;
    end proc:

=end Maple

我们现在用它来求 1000! 中含有的质因子 5 的个数:

=Maple num_factors(1000, 5);

=item * 有多少大于 5400 且满足 (1) 每位数上的数值各不相同, (2) 2 和 7 不出现,
这两个性质的整数？

我们先看看满足这些条件的B<四位>整数有多少：

=begin Perl

my $c = 0;
for (1000..9999) {
    next if /(\d).*\1/ or /[27]/;
    $c++ if $_ > 5400;
}
$c;

=end Perl

而我们理论计算的结果是

=Maple C(4,1)*P(6,2) + C(3,1)*P(7,3);

再来看看B<五位>整数有多少：

=begin Perl

my $c = 0;
for (10000..99999) {
    next if /[27]/ or /(\d).*\1/;
    $c++ if $_ > 5400;
}
$c;

=end Perl

而理论计算的结果是

=Maple C(7,1)*P(7,4);

=item * 求恰好有 28 个因子的最小正整数.

给定一个自然数, 要求其所有的因子, 基本思路是先对它进行质因数
分解, 然后对所有的质因子(重复的也包括在内)进行任意的组合. 每
一种不同的质因子组合, 其乘积便是原数的一个因子. 如果能得到所
有可能的组合, 我们便可以求出其所有的因子.

我们以 28 为例. 28 分解质因子的结果为

=Maple ifactor(28);

然后我们在 Perl 上下文中将质因子提取出来:

=begin Perl

my $num = $maple->ifactor(28);
$num =~ s/``//g;
@factors = split /\*/, $num;

=end Perl

接下来我们构造出所有质因子的组合所对应的母函数:

=begin Perl

map {
    s/^ \( \d+ \) $/$&^1/x;
    s/^ \( (\d+) \) \^ (\d+) $/sum(x$1^i,i=0..$2)/x;
} @factors;
$exp = join('*', @factors);

=end Perl

我们将母函数展开:

=Perl $exp = $maple->expand($exp);

最后, 我们从母函数的展开式中提取出所有的因子组合:

=begin Perl

sort { $a <=> $b }
    map {
        s/x(\d+)/$1/g;
        $maple->eval($_);
    } split /\+/, $exp;

=end Perl

将上面给出的代码片段拼接起来, 我们便可以得到因子构造的 Perl 实现:

=begin Perl

sub factors {
    my $num = $maple->ifactor(shift);
    $num =~ s/``//g;
    my @factors = split /\*/, $num;
    map {
        s/^ \( \d+ \) $/$&^1/x;
        s/^ \( (\d+) \) \^ (\d+) $/sum(x$1^i,i=0..$2)/x;
    } @factors;
    $exp = join('*', @factors);
    $exp = $maple->expand($exp);
    @factors =
        sort { $a <=> $b }
            map {
                s/x(\d+)/$1/g;
                $maple->eval($_);
            } split /\+/, $exp;
    return wantarray ? @factors : scalar(@factors);
}

=end Perl

我们对这个函数简单地进行一下测试:

=Perl factors(28)

=Perl factors(2)

=Perl factors(1)

本题理论计算的结果是

=Maple min( 2^(28-1), 2^(14-1)*3^(2-1), 2^(7-1)*3^(4-1), 2^(7-1)*3^(2-1)*5^(2-1));

我们来看看 960 的因子数是不是 28 个:

=Perl @factors = factors(960)

这些因子共有

=Perl scalar(@factors)

个.

我们检查一下比 960 小的正整数中有没有刚好包含 28 个因子的:

=begin Perl

use List::Util 'first';
first { factors($_) == 28 } 1..959;

=end Perl

我们看到结果为空, 因此, 960 确实就是我们要找的数.

=item * 求 n 位十进制数中出现偶数个 5 的数的个数

一开始，我们先设 n 位十进制数中出现偶数个 5 的数共有 a(n) 个，
出现奇数个 5 的个数为 b(n) 个。

我们很容易就能用 Perl 写出一个判断任意整数中是否含有
偶数个 5 的函数：

=begin Perl

sub even_num_of_5 {
    my $num = shift;
    my $i = 0;
    $num =~ s/5/$i++;$&/eg;
    return $i % 2 == 0;
}

=end Perl

我们对它进行一下简单的测试：

=Perl even_num_of_5(5) ? 'true' : 'false'

=Perl even_num_of_5(1325251) ? 'true' : 'false'

当 n 分别取 1 ~ 4 时，a(n) 依次为

=begin Perl

my @res;
for my $n (1..4) {
    my $count = 0;
    for my $x ( 10**($n-1)..('9' x $n) ) {
        $count++ if even_num_of_5($x);
    }
    push @res, $count;
}
@res;

=end Perl

不幸的是，用这种方法无法得到 a(n) 的一般形式，而且随着
n 的增大，计算量也迅速提高。通过理论分析，我们可以得到
下面的递推关系：

=begin Maple

    { a(n) = 9*a(n-1) + b(n-1), b(n) = a(n-1) + 9*b(n-1),
      a(1) = 8, b(1) = 1 };

=end Maple

我们利用 Maple 的 rsolve 进行求解，并用 Perl 提取结果：

=begin Perl

use List::Util 'first';
$maple->ReturnAST(1);
my $res = $maple->rsolve("%", "{a(n),b(n)}");
if ($res->type('set')) {
    $a_n = first { $maple->lhs($_) eq 'a(n)' } $res->ops;
    $a_n = $maple->rhs($a_n);
}
$a_n;

=end Perl

我们利用两三行 Perl 代码就准确地从 Maple 的
rsolve 函数返回的解集中提取出了通项 a(n) 的表达式。注意
我们是如何直接对导入到 Perl 环境中的 Maple AST 进行操纵的，
这避免了复杂且脆弱的正则匹配。

下面我们就用 a(n) 的通项计算一下 n 取 1 ~ 4 时的值：

=perl map { $maple->eval($a_n, "n=$_") } 1..4;

我们看到，这与前面的“暴力法”得到的结果一致。

=back
