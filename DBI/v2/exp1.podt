=head1 NAME

实验1 - 数据库的定义和建立实验

=head1 AUTHOR

章亦春 E<lt>agent2002@126.comE<gt>

3030602110 计算机0304班

计算机科学与通信工程学院 江苏大学

=head1 实验目的

要求学生熟练掌握和使用 T-SQL, SQL Server 企业管理器创建数据库，基本表，视
图、索引和修改表结构，及向数据库输主数居的操作；学会创建和使用表的主外码和约
束。

=head1 实验要求

本实验针对上述两个题目分别完成以下相应任务：

=over

=item 1.

创建相应的数据库和查看数据库属性；

=item 2.

创建基本表、确定表的主码和相应的约束，为主码建索引；

=item 3.

创建、查看视图

=item 4.

创建表之间的关联

=item 5.

利用 T-SQL 和 SQL Server 企业管理器向数据库输入数据。

=back

=head1 实验结果

显然，我没有完全按照上面的实验要求去做，因为我认为有更优雅的解决方案。

=head2 数据库模式的创建

我使用标准的 SQL 语句创建这里的数据库模式。这里代码放在一个单独的文本文件中，该
文件名为 F<Schema.sql>. 下面是该文件的内容：

=code "Schema.sql"

然后，使用下面的命令在命令提示符下执行之：

=begin shell

perl eval-sql.pl -u zwy -p zwy Schema.sql

=end shell

=head2 数据库数据的导入

由于我们现在处理的都是“玩具数据库”，表格中的数据都是从键盘敲入的，因此在 EditPlus 这
样的源代码编辑器中以逗号分隔方式输入非常便利。下面就是表格 S 的原始数据：

B<S.csv>

=code "S.csv"

注意，第一行是列名的列表。其顺序不一定与 Schema.sql 相同，因此提供很大的灵活性。其他三
张表格 J, P, SPJ 是类似的。如果需要指定空值 (NULL)，可以这么写：

	S1,精益,20,<NULL>

此时第四个字段就被置为空。

这些逗号分隔文件（CSV 文件）可以通过我的一个工具自动地导入到任意一个数据库中。方法是，
首先在控制面板中创建目标数据库的 ODBC 数据源，比如叫做 foo. 然后在命令行上设置环境
变量

	set DSN=DBI:ODBC:foo

接着运行下面的命令即可：

=begin shell

perl csv2db.pl -u zwy -p zwy S.csv J.csv P.csv SPJ.csv

=end shell

从输出我们不难看到操作全部成功。

=head2 建库全过程的自动化

很容易就可以通过批处理文件或者 Makefile 对上述两个步骤完全自动化。我的 Makefile 文件
类似下面这个样子：

=code Makefile

这样一旦我的数据库遭到了破坏或者需要重新建库，我就只需输入下面一行命令就万事大吉了：

=shell nmake

一切都是那么完美，呵呵。
