enter!

-------------------------------------------------------------------

0

Parsing Stack: # program 

Input:         read x ; write y ; if 0 < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        program -> stmt-sequence

-------------------------------------------------------------------

1

Parsing Stack: # stmt-sequence 

Input:         read x ; write y ; if 0 < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        stmt-sequence -> statement stmt-sequence@

-------------------------------------------------------------------

2

Parsing Stack: # stmt-sequence@ statement 

Input:         read x ; write y ; if 0 < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        statement -> read-stmt

-------------------------------------------------------------------

3

Parsing Stack: # stmt-sequence@ read-stmt 

Input:         read x ; write y ; if 0 < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        read-stmt -> read identifier

-------------------------------------------------------------------

4

Parsing Stack: # stmt-sequence@ identifier read 

Input:         read x ; write y ; if 0 < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        match

-------------------------------------------------------------------

5

Parsing Stack: # stmt-sequence@ identifier 

Input:         x ; write y ; if 0 < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        match

-------------------------------------------------------------------

6

Parsing Stack: # stmt-sequence@ 

Input:         ; write y ; if 0 < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        stmt-sequence@ -> ; statement stmt-sequence@

-------------------------------------------------------------------

7

Parsing Stack: # stmt-sequence@ statement ; 

Input:         ; write y ; if 0 < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        match

-------------------------------------------------------------------

8

Parsing Stack: # stmt-sequence@ statement 

Input:         write y ; if 0 < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        statement -> write-stmt

-------------------------------------------------------------------

9

Parsing Stack: # stmt-sequence@ write-stmt 

Input:         write y ; if 0 < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        write-stmt -> write exp

-------------------------------------------------------------------

10

Parsing Stack: # stmt-sequence@ exp write 

Input:         write y ; if 0 < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        match

-------------------------------------------------------------------

11

Parsing Stack: # stmt-sequence@ exp 

Input:         y ; if 0 < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        exp -> simple-exp exp@

-------------------------------------------------------------------

12

Parsing Stack: # stmt-sequence@ exp@ simple-exp 

Input:         y ; if 0 < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        simple-exp -> term simple-exp@

-------------------------------------------------------------------

13

Parsing Stack: # stmt-sequence@ exp@ simple-exp@ term 

Input:         y ; if 0 < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        term -> factor term@

-------------------------------------------------------------------

14

Parsing Stack: # stmt-sequence@ exp@ simple-exp@ term@ factor 

Input:         y ; if 0 < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        factor -> identifier

-------------------------------------------------------------------

15

Parsing Stack: # stmt-sequence@ exp@ simple-exp@ term@ identifier 

Input:         y ; if 0 < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        match

-------------------------------------------------------------------

16

Parsing Stack: # stmt-sequence@ exp@ simple-exp@ term@ 

Input:         ; if 0 < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        term@ -> @

-------------------------------------------------------------------

17

Parsing Stack: # stmt-sequence@ exp@ simple-exp@ 

Input:         ; if 0 < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        simple-exp@ -> @

-------------------------------------------------------------------

18

Parsing Stack: # stmt-sequence@ exp@ 

Input:         ; if 0 < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        exp@ -> @

-------------------------------------------------------------------

19

Parsing Stack: # stmt-sequence@ 

Input:         ; if 0 < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        stmt-sequence@ -> ; statement stmt-sequence@

-------------------------------------------------------------------

20

Parsing Stack: # stmt-sequence@ statement ; 

Input:         ; if 0 < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        match

-------------------------------------------------------------------

21

Parsing Stack: # stmt-sequence@ statement 

Input:         if 0 < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        statement -> if-stmt

-------------------------------------------------------------------

22

Parsing Stack: # stmt-sequence@ if-stmt 

Input:         if 0 < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        if-stmt -> if exp then stmt-sequence if-stmt@

-------------------------------------------------------------------

23

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp if 

Input:         if 0 < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        match

-------------------------------------------------------------------

24

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp 

Input:         0 < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        exp -> simple-exp exp@

-------------------------------------------------------------------

25

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp 

Input:         0 < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        simple-exp -> term simple-exp@

-------------------------------------------------------------------

26

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term 

Input:         0 < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        term -> factor term@

-------------------------------------------------------------------

27

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ factor 

Input:         0 < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        factor -> number

-------------------------------------------------------------------

28

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ number 

Input:         0 < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        match

-------------------------------------------------------------------

29

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ 

Input:         < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        term@ -> @

-------------------------------------------------------------------

30

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ 

Input:         < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        simple-exp@ -> @

-------------------------------------------------------------------

31

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ 

Input:         < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        exp@ -> comparison-op simple-exp exp@

-------------------------------------------------------------------

32

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp comparison-op 

Input:         < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        comparison-op -> <

-------------------------------------------------------------------

33

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp < 

Input:         < ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        match

-------------------------------------------------------------------

34

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp 

Input:         ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        simple-exp -> term simple-exp@

-------------------------------------------------------------------

35

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term 

Input:         ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        term -> factor term@

-------------------------------------------------------------------

36

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ factor 

Input:         ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        factor -> ( exp )

-------------------------------------------------------------------

37

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp ( 

Input:         ( x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        match

-------------------------------------------------------------------

38

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp 

Input:         x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        exp -> simple-exp exp@

-------------------------------------------------------------------

39

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp 

Input:         x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        simple-exp -> term simple-exp@

-------------------------------------------------------------------

40

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp@ term 

Input:         x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        term -> factor term@

-------------------------------------------------------------------

41

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp@ term@ factor 

Input:         x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        factor -> identifier

-------------------------------------------------------------------

42

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp@ term@ identifier 

Input:         x * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        match

-------------------------------------------------------------------

43

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp@ term@ 

Input:         * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        term@ -> mulop factor term@

-------------------------------------------------------------------

44

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp@ term@ factor mulop 

Input:         * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        mulop -> *

-------------------------------------------------------------------

45

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp@ term@ factor * 

Input:         * ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        match

-------------------------------------------------------------------

46

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp@ term@ factor 

Input:         ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        factor -> ( exp )

-------------------------------------------------------------------

47

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp@ term@ ) exp ( 

Input:         ( 5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        match

-------------------------------------------------------------------

48

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp@ term@ ) exp 

Input:         5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        exp -> simple-exp exp@

-------------------------------------------------------------------

49

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp@ term@ ) exp@ simple-exp 

Input:         5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        simple-exp -> term simple-exp@

-------------------------------------------------------------------

50

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp@ term@ ) exp@ simple-exp@ term 

Input:         5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        term -> factor term@

-------------------------------------------------------------------

51

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp@ term@ ) exp@ simple-exp@ term@ factor 

Input:         5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        factor -> number

-------------------------------------------------------------------

52

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp@ term@ ) exp@ simple-exp@ term@ number 

Input:         5 + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        match

-------------------------------------------------------------------

53

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp@ term@ ) exp@ simple-exp@ term@ 

Input:         + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        term@ -> @

-------------------------------------------------------------------

54

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp@ term@ ) exp@ simple-exp@ 

Input:         + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        simple-exp@ -> addop term simple-exp@

-------------------------------------------------------------------

55

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp@ term@ ) exp@ simple-exp@ term addop 

Input:         + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        addop -> +

-------------------------------------------------------------------

56

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp@ term@ ) exp@ simple-exp@ term + 

Input:         + 3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        match

-------------------------------------------------------------------

57

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp@ term@ ) exp@ simple-exp@ term 

Input:         3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        term -> factor term@

-------------------------------------------------------------------

58

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp@ term@ ) exp@ simple-exp@ term@ factor 

Input:         3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        factor -> number

-------------------------------------------------------------------

59

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp@ term@ ) exp@ simple-exp@ term@ number 

Input:         3 ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        match

-------------------------------------------------------------------

60

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp@ term@ ) exp@ simple-exp@ term@ 

Input:         ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        term@ -> @

-------------------------------------------------------------------

61

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp@ term@ ) exp@ simple-exp@ 

Input:         ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        simple-exp@ -> @

-------------------------------------------------------------------

62

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp@ term@ ) exp@ 

Input:         ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        exp@ -> @

-------------------------------------------------------------------

63

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp@ term@ ) 

Input:         ) - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        match

-------------------------------------------------------------------

64

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp@ term@ 

Input:         - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        term@ -> @

-------------------------------------------------------------------

65

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp@ 

Input:         - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        simple-exp@ -> addop term simple-exp@

-------------------------------------------------------------------

66

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp@ term addop 

Input:         - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        addop -> -

-------------------------------------------------------------------

67

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp@ term - 

Input:         - 6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        match

-------------------------------------------------------------------

68

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp@ term 

Input:         6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        term -> factor term@

-------------------------------------------------------------------

69

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp@ term@ factor 

Input:         6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        factor -> number

-------------------------------------------------------------------

70

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp@ term@ number 

Input:         6 ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        match

-------------------------------------------------------------------

71

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp@ term@ 

Input:         ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        term@ -> @

-------------------------------------------------------------------

72

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ simple-exp@ 

Input:         ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        simple-exp@ -> @

-------------------------------------------------------------------

73

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) exp@ 

Input:         ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        exp@ -> @

-------------------------------------------------------------------

74

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ ) 

Input:         ) then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        match

-------------------------------------------------------------------

75

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ term@ 

Input:         then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        term@ -> @

-------------------------------------------------------------------

76

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ simple-exp@ 

Input:         then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        simple-exp@ -> @

-------------------------------------------------------------------

77

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then exp@ 

Input:         then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        exp@ -> @

-------------------------------------------------------------------

78

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence then 

Input:         then fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        match

-------------------------------------------------------------------

79

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence 

Input:         fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        stmt-sequence -> statement stmt-sequence@

-------------------------------------------------------------------

80

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence@ statement 

Input:         fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        statement -> assign-stmt

-------------------------------------------------------------------

81

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence@ assign-stmt 

Input:         fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        assign-stmt -> identifier := exp

-------------------------------------------------------------------

82

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence@ exp := identifier 

Input:         fact = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        match

-------------------------------------------------------------------

83

Parsing Stack: # stmt-sequence@ if-stmt@ stmt-sequence@ exp := 

Input:         = 1 ; repeat fact := fact * x ; x := x - 1 ; x := ( y + 5 ) * 3 until x = 0 ; write fact end # 

Action:        syntax error! near "="  at line  4 in tiny3
