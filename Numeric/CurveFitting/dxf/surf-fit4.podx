=head1 NAME

surf-fit4 - Surface Fitting (volume 4)

=head1 AUTHOR

Agent Zhang (章亦春) E<lt>agent2002@126.comE<gt>

=head1 VERSION

    Create:      2005-01-08
    Last Update: 2005-01-08

=head1 DESCRIPTION

本文将接着 surf-fit 一文继续求解三维曲面的经验公式。

=head1 三维曲面经验公式的寻找与拟合

=head2 待定常数 a 与 b 的求解

surf-fit 一文已经求出了 x-y 平面上 8 条曲线的经验公式，为了
参照的方便，我把它们列在下面：

=begin Perl

use YAML qw(LoadFile Dump DumpFile);
@eqns = @{ LoadFile 'data/tmp.yml' };
Dump(\@eqns);

=end Perl

下面我们利用 Maple 的 match 函数来从 x-y 经验公式中提取 a 和 b. 我
习惯于用 Perl 函数进行封装：

=Maple 1:

=begin Perl

sub get_ab {
    my $eqn = shift;
    $maple->match("$eqn = a*ln(x+1.)^b", 'x', "'s'");
    $maple->ReturnAST(1);
    my $s = $maple->eval_cmd('s;');
    die if not $s->type('set');
    my @elems = $s->ops;
    my ($a, $b);
    map { ($_->lhs eq 'a') ? ($a = $_->rhs) : ($b = $_->rhs) } @elems;
    $maple->ReturnAST(0);
    return ("$a", "$b");
}

=end Perl

我们先来简单地测试一下 get_ab 函数：

=begin Perl

get_ab('1.285763168*ln(x+1.)^2.784');

=end Perl

我们看到，结果完全正确。下面我们就可以很轻松地得到 a-z 平面上的“采样点”和
b-z 平面上的“采样点”了：

=begin Perl

@az = ();
@bz = ();
for my $item (@eqns) {
    my ($z, $eqn) = @$item;
    my ($a, $b) = get_ab($eqn);
    push @az, [$z, $a];
    push @bz, [$z, $b];
}
Dump(\@az, \@bz);

=end Perl

=head2 a-z 平面上的拟合

现在我们可以作出 a-z 平面上的采样点了：

=begin Perl

my @s = map { '['.join(',',@$_).']' } @az;
my $list = '['.join(',', @s).']';
$maple->eval_cmd(<<".");
az_points := $list:
with(plots):
plotsetup(gif, plotoutput="image/diag1c.gif", plotoptions="height=300, width=600"):
az_pplot := pointplot(az_points, symbol=CIRCLE, color=black):
display([az_pplot], axes=BOXED);
.

=end Perl

=begin html

<pre>
    <img src="image/diag1c.gif"/>
</pre>

=end html

接下来就得为 a-z 曲线选择经验函数了。从图上看，很像是双曲函数，因此我们
不妨将经验公式设为 a = c1/z+c2 形式。这里 c1 和 c2 是待定常数。很高兴
的是我们可以直接用最小二乘法解出 c1 和 c2：

=begin Maple

with(CurveFitting):
LeastSquares(az_points, z, curve=c6*z^6+c5*z^5+c4*z^4+c3*z^3+c2*z^2+c1*z^1+c0):
az := evalf(%);

=end Maple

作出 a-z 经验曲线的图象：

=begin Maple

with(plots):
plotsetup(gif, plotoutput="image/diag2c.gif", plotoptions="height=300, width=600"):
az_plot := plot(az, z=0.5..5.5, color=red):
display([az_plot, az_pplot], axes=BOXED);

=end Maple

=begin html

<pre>
    <img src="image/diag2c.gif"/>
</pre>

=end html

显然，这个经验函数已经足够好了，因此完全没有必要再去调整它了。

=head2 b-z 平面上的拟合

我们再画出 b-z 平面上的采样点：

=begin Perl

my @s = map { '['.join(',',@$_).']' } @bz;
my $list = '['.join(',', @s).']';
$maple->eval_cmd(<<".");
bz_points := $list:
with(plots):
plotsetup(gif, plotoutput="image/diag4c.gif", plotoptions="height=300, width=600"):
bz_pplot := pointplot(bz_points, symbol=CROSS, color=black):
display([bz_pplot], axes=BOXED);
.

=end Perl

=begin html

<pre>
    <img src="image/diag4c.gif"/>
</pre>

=end html

接下来就得为 b-z 曲线选择经验函数了。从图上看，很像是双曲函数，因此我们
不妨将经验公式设为 b = c1*z^2+c2*z+c3 的形式。这里 c1 和 c2 是待定常数。很高兴
的是我们可以直接用最小二乘法解出 c1 和 c2：

=begin Maple

with(CurveFitting):
LeastSquares(bz_points, z, curve=c1*z+c2):
bz := evalf(%);
bz := 2.381966012+.618033988*z;

=end Maple

作出 b-z 经验曲线的图象：

=begin Maple

with(plots):
plotsetup(gif, plotoutput="image/diag5c.gif", plotoptions="height=300, width=600"):
bz_plot := plot(bz, z=0.5..5.5, color=red):
display([bz_plot, bz_pplot], axes=BOXED);

=end Maple

=begin html

<pre>
    <img src="image/diag5c.gif"/>
</pre>

=end html

显然，这个经验函数已经足够好了，因此完全没有必要再去调整它了。

=head2 三维经验曲面

=Maple surf := evalf(az*ln(x+1.)^bz);

=begin Maple

plotsetup(gif, plotoutput="image/diag6c.gif", plotoptions="height=600, width=600"):
plot3d(surf, x=0..1000, z=0.8..5.0, axes=boxed, labels=[x,z,y]);

=end Maple

=begin html

<pre>
    <img src="image/diag6c.gif"/>
</pre>

=end html

=begin Perl

use Scalar::Util qw(looks_like_number);
my %curves = %{ LoadFile('data/2d-points.yml') };
$i = 1;
for my $key (keys %curves) {
    my $z = $key;
    $z =~ s/\s+|mm$//g;
    die if not looks_like_number($z);
    my @points = @{ $curves{$key} };
    plot_curve($i, $z, @points);
    $i++;
}

sub plot_curve {
    my $i = shift;
    my $z = shift;
    my @points = @_;
my @s = map { '['.join(',',@$_).']' } @points;
my $list = '['.join(',', @s).']';
    $maple->eval_cmd(<<".");
points := $list:
curve := evalf(eval(surf, z=$z));
pplot_$i := pointplot(points, symbol=CIRCLE, color=black):
cplot_$i := plot(curve, x=0..1200, color=red):
.
}

=end Perl

下面我们将所有的点和曲线都一齐画在 x-y 平面上：

=begin Perl

my @list;
foreach (1..$i-1) {
    push @list, "pplot_$_,cplot_$_";
}
my $list = '['.join(',', @list).']';
$maple->eval_cmd(<<".");
plotsetup(gif, plotoutput="image/diag7c.gif", plotoptions="height=600, width=600"):
display($list, axes=BOXED);
.

=end Perl

=begin html

<pre>
    <img src="image/diag7c.gif"/>
</pre>

=end html
