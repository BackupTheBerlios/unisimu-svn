[% DEFAULT
    ext = "mm";
   SET
    table = {
        mm  = 'MathModel',
        mms = 'MathModel::Eval',
        xml = 'XML',
        mpl = 'Maple',
        pl  = 'Perl',
        kid = 'Kid',
    };
   SET
    lang = table.$ext;
-%]
#: kid2[% ext %].pl
#: Convert .kid source to .[% ext %] program
#: Copyright (c) 2006 Agent Zhang
#: This file was generated from [% template.name %]

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../lib";
use Getopt::Std;
use Kid::[% lang %];

my %opts;
getopts('o:', \%opts);

my @infiles = map glob, @ARGV;
die "Usage: kid2[% ext %] [-o <outfile>] <infile-list>\n" if ! @infiles;

my $outfile = $opts{o};

if (@infiles > 1) {
    if ($outfile) {
        warn "`-o $outfile' ignored due to multiple input files\n";
    }
    for my $infile (@infiles) {
        process_file($infile);
    }
} else {
    process_file($infiles[0], $outfile);
}

[%- IF lang == 'XML' %]
my $dtd_file = "Kid.dtd";
open my $dtd, "> $dtd_file" or
    die "Can't open DTD file $dtd_file for writing: $!\n";

print $dtd (<<END_DTD);
<?xml version="1.0"?>

<!ELEMENT program          (statement_list)>
<!ELEMENT statement_list   (statement+)>
<!ELEMENT statement        (assignment | if_statement | block | declaration | comment)>
<!ELEMENT assignment       (var | expression)>
<!ELEMENT var              (identifier)>
<!ELEMENT identifier       (#PCDATA)>
<!ELEMENT expression       (neg?, (term, op)*, term)>
<!ELEMENT neg              (#PCDATA)>
<!ELEMENT term             ((factor, op)*, factor)>
<!ELEMENT factor           (number | expression | proc_call | var)>
<!ELEMENT number           (#PCDATA)>
<!ELEMENT proc_call        (identifier, expression_list)>
<!ELEMENT expression_list  (expression+)>
<!ELEMENT op               (#PCDATA)>
<!ELEMENT if_statement     (condition, statement, statement?)>
<!ELEMENT condition        (expression, rel_op, expression)>
<!ELEMENT rel_op           (#PCDATA)>
<!ELEMENT block            (statement_list)>
<!ELEMENT declaration      (proc_decl)>
<!ELEMENT proc_decl        (identifier, identifier_list, block)>
<!ELEMENT identifier_list  (identifier+)>
<!ELEMENT comment          (#PCDATA)>
END_DTD

close $dtd;
print "DTD file $dtd_file generated.\n";
[%- END %]

sub process_file {
    my ($infile, $outfile) = @_;
    open my $in, $infile or
        die "error: Can't open $infile for reading: $!\n";
    my $src;
    {
        local $/;
        $src = <$in>;
    }
    close $in;

    my $perl = Kid::[% lang %]::translate($src);
    defined $perl or
        die "Can't generate [% lang %] code due to compilation errors.\n";

    if (!defined $outfile) {
        $outfile = gen_name($infile);
    }
    open my $out, "> $outfile" or
        die "error: Can't open $outfile for writing: $!\n";
    print $out $perl;
    close $out;
    print "$outfile generated.\n";
}

sub gen_name {
    my $infile = shift;
    my $outfile;
  [%- IF ext == 'kid' %]
    $outfile = $infile . '.[% ext %]';
  [%- ELSE %]
    if (($outfile = $infile) !~ s/\.kid$/.[% ext %]/i) {
        $outfile .= '.[% ext %]';
    }
  [%- END %]
    $outfile;
}
