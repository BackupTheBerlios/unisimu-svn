[% DEFAULT
    ext = "mm";
   SET
    table = {
        mm  = 'MathModel',
        mms = 'MathModel::Eval',
        xml = 'XML',
        mpl = 'Maple',
        pl  = 'Perl',
        kid = 'Kid',
    };
   SET
    lang = table.$ext;
-%]
#: kid2[% ext %].pl
#: Convert .kid source to .[% ext %] program
#: Copyright (c) 2006 Agent Zhang
#: This file was generated from [% template.name %]

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../lib";
use Getopt::Std;
use Kid::[% lang %];

my %opts;
getopts('o:', \%opts);
my $infile = shift;
die "Usage: kid2[% ext %] [-o <outfile>] <infile>\n" if !$infile;

my $outfile = $opts{o};
if (!defined $outfile) {
    if (($outfile = $infile) !~ s/\.kid$/.[% ext %]/i) {
        $outfile .= '.[% ext %]';
    }
}

open my $in, $infile or
    die "error: Can't open $infile for reading: $!\n";
my $src;
{
    local $/;
    $src = <$in>;
}
close $in;

my $perl = Kid::[% lang %]::translate($src);
defined $perl or
    die "Can't generate [% lang %] code due to compilation errors.\n";

open my $out, "> $outfile" or
    die "error: Can't open $outfile for writing: $!\n";
print $out $perl;
close $out;
print "$outfile generated.\n";
